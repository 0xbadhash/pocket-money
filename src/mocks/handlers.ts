// src/mocks/handlers.ts
import { http, HttpResponse, delay } from 'msw';

let idCounter = 100;

export const handlers = [
  http.post('/api/funds/add', async ({ request }) => {
    const newFundDetails = await request.json() as { amount: number; source: string; kidId?: string };

    await delay(Math.random() * 1000 + 500); // Simulate network delay

    // --- Specific Error Simulations Based on Input ---
    if (newFundDetails.amount === 1.00) { // Trigger INSUFFICIENT_FUNDS for amount 1.00
      return HttpResponse.json(
        { success: false, error: { code: 'INSUFFICIENT_FUNDS', message: 'Mock: Source account has insufficient funds for amount 1.00.' } },
        { status: 400 }
      );
    }
    if (newFundDetails.source === 'expired_card') { // Trigger PAYMENT_METHOD_INVALID for source 'expired_card'
      return HttpResponse.json(
        { success: false, error: { code: 'PAYMENT_METHOD_INVALID', message: 'Mock: The payment method specified as expired_card is invalid.' } },
        { status: 400 }
      );
    }
    if (newFundDetails.amount === 12345) { // Trigger ACCOUNT_LIMIT_EXCEEDED for amount 12345
        return HttpResponse.json(
            { success: false, error: { code: 'ACCOUNT_LIMIT_EXCEEDED', message: 'Mock: Amount 12345 exceeds account limit.'} },
            { status: 400 }
        );
    }
    if (newFundDetails.kidId === 'kid_nonexistent') { // Trigger INVALID_KID_ID
        return HttpResponse.json(
            { success: false, error: { code: 'INVALID_KID_ID', message: 'Mock: Kid ID kid_nonexistent is not valid.'} },
            { status: 400 }
        );
    }


    // --- Generic Validations (keeping some simple ones) ---
    if (typeof newFundDetails.amount !== 'number' || newFundDetails.amount <= 0) {
      return HttpResponse.json(
        // Using new error structure
        { success: false, error: { code: 'INVALID_AMOUNT', message: 'Amount must be a positive number.' } },
        { status: 400 }
      );
    }
    if (!newFundDetails.source) {
      return HttpResponse.json(
        { success: false, error: { code: 'PAYMENT_METHOD_INVALID', message: 'Payment source is required.' } },
        { status: 400 }
      );
    }

    // --- Simulate Occasional Generic Server Error ---
    if (Math.random() < 0.1) { // 10% chance of a generic server error
      return HttpResponse.json(
        { success: false, error: { code: 'GENERAL_SERVER_ERROR', message: 'A simulated random server error occurred.' } },
        { status: 500 }
      );
    }

    // --- Success Path ---
    const transactionId = `mock_txn_${Date.now()}_${idCounter++}`;
    const kidName = newFundDetails.kidId ? `Kid ${newFundDetails.kidId.replace('kid_', '').toUpperCase()}` : 'General Funds';
    const description = `Mock deposit from ${newFundDetails.source} for ${kidName}`;

    const mockTransaction = {
      id: transactionId,
      date: new Date().toISOString(),
      description: description, // This description is generated by the mock
      amount: newFundDetails.amount,
      category: 'Income',
      kidId: newFundDetails.kidId,
    };

    const mockNewBalance = 200 + newFundDetails.amount; // Simple balance simulation

    return HttpResponse.json({
      success: true,
      transaction: mockTransaction,
      newBalance: mockNewBalance
    });
  }),
];
